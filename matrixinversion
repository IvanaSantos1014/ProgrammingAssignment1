## Create a Matrix Inversion functions
## Write a short description on each function

makeCacheMatrix <- function(x = matrix()) { 
        ## Creates a special matrix of an object that can cache its inerse
makeCacheMatrix <- function(x = matrix()) { ## argument with default mode of the matrix
  inv <- NULL ## inv as NULL that holds the value of matrix inverse
  set <- function(y) { ## function to assign new
    x <<- y ## parent environment of the value of the matrix
    inv <<- NULL ## reset inv to NULL if there is new matrix
  }
  get <- function() x ## defines a function
  setinverse <- function(inverse) inv <<- inverse ## assign values of inv to the parent environment
  getinverse <- function() inv ## values of inv
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse) ## lists that needs to be refer
}

## Write a short description on each function
## Computes the inverse of the special matrix returned by makeCacheMatrix above.
        ## cacheSolve(x)
cacheSolve <- function(x, ...) {
  ## Return a matrix that is the inverse of 'x'
  inv <- x$getinverse()
  if(!is.null(inv)) {
    message("getting cached matrix inverse")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data, ...)
  x$setinverse(inv)
  inv
}
